name: Pipeline Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Pipeline
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [18.x, 20.x]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest

    - name: Install jq
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y jq
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install jq
        fi
      shell: bash

    - name: Make scripts executable
      run: |
        chmod +x pipeline.sh
        chmod +x tests/run_all_tests.sh
        chmod +x tests/unit/*.sh
        chmod +x tests/test_helper.bash

    - name: Run test suite
      run: bash tests/run_all_tests.sh

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}-python${{ matrix.python-version }}
        path: tests/*.log
        retention-days: 30

  lint:
    name: Lint Shell Scripts
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Run ShellCheck on pipeline.sh
      run: shellcheck pipeline.sh || exit 1

    - name: Run ShellCheck on test scripts
      run: |
        find tests -name "*.sh" -o -name "*.bash" | xargs shellcheck || exit 1

  bash-compatibility:
    name: Bash Version Compatibility
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        bash-version: ['4.4', '5.0', '5.1', 'system']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install specific Bash version
      if: matrix.bash-version != 'system'
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          # Ubuntu: Install from source
          wget http://ftp.gnu.org/gnu/bash/bash-${{ matrix.bash-version }}.tar.gz
          tar xzf bash-${{ matrix.bash-version }}.tar.gz
          cd bash-${{ matrix.bash-version }}
          ./configure --prefix=/usr/local/bash-${{ matrix.bash-version }}
          make
          sudo make install
          export BASH_BIN=/usr/local/bash-${{ matrix.bash-version }}/bin/bash
        else
          # macOS: Use system bash (brew doesn't support specific versions easily)
          export BASH_BIN=/bin/bash
        fi
        echo "BASH_BIN=$BASH_BIN" >> $GITHUB_ENV

    - name: Use system Bash
      if: matrix.bash-version == 'system'
      run: echo "BASH_BIN=/bin/bash" >> $GITHUB_ENV

    - name: Verify Bash version
      run: |
        ${{ env.BASH_BIN }} --version

    - name: Install dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y jq
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install jq
        fi
      shell: bash

    - name: Run pipeline.sh with this Bash version
      run: |
        ${{ env.BASH_BIN }} pipeline.sh --help || echo "Help command tested"

    - name: Test basic functionality
      run: |
        # Create minimal test environment
        mkdir -p test-env
        cd test-env
        ${{ env.BASH_BIN }} ../pipeline.sh init || echo "Init tested"

  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Set up Python for Bandit
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Bandit (Python Security Linter)
      run: pip install bandit[toml]

    - name: Run Bandit on Python files
      run: |
        # Scan any Python files in the repository
        find . -name "*.py" -type f | xargs bandit -r || echo "No Python files found or Bandit found issues"
      continue-on-error: true

    - name: Run security audit on dependencies
      run: |
        echo "Checking for common security issues in scripts..."
        # Check for hardcoded credentials
        if grep -rE "(password|secret|api_key|token)\s*=\s*['\"][^'\"]+['\"]" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md"; then
          echo "⚠️ WARNING: Potential hardcoded credentials detected"
        else
          echo "✅ No hardcoded credentials detected"
        fi

  coverage:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Run tests with coverage
      run: |
        chmod +x tests/run_all_tests.sh
        bash tests/run_all_tests.sh 2>&1 | tee test-output.log

    - name: Analyze code coverage
      run: |
        chmod +x tests/analyze_coverage.sh
        bash tests/analyze_coverage.sh > coverage-report.txt 2>&1 || true
        cat coverage-report.txt

    - name: Enforce coverage requirements
      run: |
        # Extract coverage percentage from analyze_coverage.sh output
        COVERAGE=$(grep "Coverage:" coverage-report.txt | grep -oE '[0-9]+%' | grep -oE '[0-9]+' || echo "0")
        echo "Code coverage: ${COVERAGE}%"

        if [ "$COVERAGE" -lt 80 ]; then
          echo "❌ FAIL: Code coverage ${COVERAGE}% is below required 80%"
          exit 1
        else
          echo "✅ PASS: Code coverage ${COVERAGE}% meets requirement (>= 80%)"
        fi

    - name: Generate coverage summary
      run: |
        echo "## Test Coverage Summary" > coverage-summary.md
        echo "" >> coverage-summary.md
        echo "**Pipeline Test Results:**" >> coverage-summary.md
        echo "" >> coverage-summary.md
        grep "Total Passed:" test-output.log >> coverage-summary.md || echo "No test results found" >> coverage-summary.md
        echo "" >> coverage-summary.md
        echo "**Code Coverage:**" >> coverage-summary.md
        echo "" >> coverage-summary.md
        cat coverage-report.txt >> coverage-summary.md
        echo "" >> coverage-summary.md
        cat coverage-summary.md

    - name: Upload coverage summary
      uses: actions/upload-artifact@v4
      with:
        name: coverage-summary
        path: coverage-summary.md
        retention-days: 90

  pr-status-check:
    name: PR Status Check (All Tests Must Pass)
    runs-on: ubuntu-latest
    needs: [test, lint, bash-compatibility, security, coverage]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "Checking status of all CI jobs..."
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "❌ Test job failed"
          exit 1
        fi
        if [ "${{ needs.lint.result }}" != "success" ]; then
          echo "❌ Lint job failed"
          exit 1
        fi
        if [ "${{ needs.bash-compatibility.result }}" != "success" ]; then
          echo "❌ Bash compatibility job failed"
          exit 1
        fi
        if [ "${{ needs.security.result }}" != "success" ]; then
          echo "❌ Security job failed"
          exit 1
        fi
        if [ "${{ needs.coverage.result }}" != "success" ]; then
          echo "❌ Coverage job failed"
          exit 1
        fi
        echo "✅ All CI jobs passed successfully"

    - name: PR can be merged
      run: |
        echo "🎉 All quality gates passed. PR is ready to merge."
