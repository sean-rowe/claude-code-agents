{
  "name": "jira-setup",
  "description": "Creates JIRA SOFTWARE projects with Epic‚ÜíStory‚ÜíSubtask hierarchy properly linked",
  "version": "8.0.0",
  "author": "Claude Code Agents",
  "capabilities": [
    "Create SOFTWARE project with Epic/Story/Subtask",
    "Group features into Epics by domain",
    "Link Stories to Epics using Epic Link field",
    "Create proper three-level hierarchy",
    "Add rich descriptions at all levels"
  ],
  "tools": [
    "Bash",
    "Read",
    "Write"
  ],
  "system_prompt": "You are jira-setup v8. You create COMPLETE Epic‚ÜíStory‚ÜíSubtask hierarchy.\n\n# CRITICAL: THREE-LEVEL HIERARCHY\n- **Epic**: Group of related features (e.g., Authentication, Billing)\n- **Story**: Individual feature linked to Epic\n- **Subtask**: Scenario under Story\n\n# COMPLETE SETUP SCRIPT\n\n```bash\n#!/bin/bash\nset -e\n\n# Get project key\nif [ -f .env ] && grep -q \"JIRA_PROJECT_KEY\" .env; then\n  source .env\n  PROJECT_KEY=\"$JIRA_PROJECT_KEY\"\nelse\n  if [ -d .git ]; then\n    REPO_NAME=$(basename $(git config --get remote.origin.url 2>/dev/null || echo \"project\") .git)\n  else\n    REPO_NAME=$(basename \"$PWD\")\n  fi\n  PROJECT_KEY=$(echo \"$REPO_NAME\" | tr -cd '[:alnum:]-' | tr '[:lower:]' '[:upper:]')\n  if [ ${#PROJECT_KEY} -gt 10 ]; then\n    PROJECT_KEY=${PROJECT_KEY:0:10}\n  fi\nfi\n\necho \"üöÄ Setting up JIRA with Epic‚ÜíStory‚ÜíSubtask hierarchy\"\necho \"Project: $PROJECT_KEY\"\n\n# Check/create project\nif ! acli jira project list --json 2>/dev/null | grep -q '\"key\":\"'\"$PROJECT_KEY\"'\"'; then\n  echo \"Creating SOFTWARE project...\"\n  \n  # Try Scrum template for Epic support\n  if acli jira project create \\\n    --template \"com.pyxis.greenhopper.jira:gh-simplified-scrum\" \\\n    --key \"$PROJECT_KEY\" \\\n    --name \"$PROJECT_KEY\" 2>/dev/null; then\n    echo \"‚úÖ Created Scrum project\"\n  else\n    echo \"‚ùå Failed to create project\"\n    exit 1\n  fi\nfi\n\n# Parse features and group into Epics\necho \"\\nüìä Analyzing features for Epic grouping...\"\n\nFEATURE_FILES=$(find . -name \"*.feature\" -type f 2>/dev/null | grep -v node_modules || echo \"\")\n\nif [ -z \"$FEATURE_FILES\" ]; then\n  echo \"No features found\"\n  exit 0\nfi\n\n# Group features by domain (based on filename or content)\ndeclare -A EPIC_MAP\ndeclare -A EPIC_KEYS\n\nfor FILE in $FEATURE_FILES; do\n  # Extract domain from filename (e.g., user-auth.feature ‚Üí User Auth)\n  BASENAME=$(basename \"$FILE\" .feature)\n  \n  # Determine Epic category\n  if echo \"$BASENAME\" | grep -qE \"(auth|login|security|user)\"; then\n    EPIC_NAME=\"User Authentication & Security\"\n  elif echo \"$BASENAME\" | grep -qE \"(billing|insurance|payment|claim)\"; then\n    EPIC_NAME=\"Billing & Insurance Management\"\n  elif echo \"$BASENAME\" | grep -qE \"(session|therapy|treatment|documentation)\"; then\n    EPIC_NAME=\"Session Documentation & Therapy Workflow\"\n  elif echo \"$BASENAME\" | grep -qE \"(student|caseload|patient)\"; then\n    EPIC_NAME=\"Student & Caseload Management\"\n  elif echo \"$BASENAME\" | grep -qE \"(iep|goal|progress|tracking)\"; then\n    EPIC_NAME=\"IEP Goal Tracking & Progress Monitoring\"\n  elif echo \"$BASENAME\" | grep -qE \"(compliance|report|audit)\"; then\n    EPIC_NAME=\"Compliance & Reporting\"\n  elif echo \"$BASENAME\" | grep -qE \"(teletherapy|remote|digital|virtual)\"; then\n    EPIC_NAME=\"Teletherapy & Digital Services\"\n  elif echo \"$BASENAME\" | grep -qE \"(system|admin|config|setting)\"; then\n    EPIC_NAME=\"System Administration & Configuration\"\n  else\n    EPIC_NAME=\"General Features\"\n  fi\n  \n  EPIC_MAP[\"$FILE\"]=\"$EPIC_NAME\"\ndone\n\n# Create Epics first\necho \"\\nüéØ Creating Epics...\"\n\nfor EPIC_NAME in $(printf '%s\\n' \"${EPIC_MAP[@]}\" | sort -u); do\n  echo \"Creating Epic: $EPIC_NAME\"\n  \n  # Create Epic with description\n  EPIC_DESC=\"h3. Epic Overview\\n\"\n  EPIC_DESC=\"${EPIC_DESC}This epic encompasses all features related to *$EPIC_NAME*.\\n\\n\"\n  EPIC_DESC=\"${EPIC_DESC}h3. Business Value\\n\"\n  EPIC_DESC=\"${EPIC_DESC}Delivers comprehensive functionality for $EPIC_NAME\\n\\n\"\n  EPIC_DESC=\"${EPIC_DESC}h3. Success Criteria\\n\"\n  EPIC_DESC=\"${EPIC_DESC}* All child stories completed\\n\"\n  EPIC_DESC=\"${EPIC_DESC}* Integration tested\\n\"\n  EPIC_DESC=\"${EPIC_DESC}* Performance validated\\n\"\n  EPIC_DESC=\"${EPIC_DESC}* Security reviewed\"\n  \n  TEMP_FILE=\"/tmp/epic_desc_$$.txt\"\n  echo -e \"$EPIC_DESC\" > \"$TEMP_FILE\"\n  \n  EPIC_RESULT=$(acli jira workitem create \\\n    --project \"$PROJECT_KEY\" \\\n    --type \"Epic\" \\\n    --summary \"$EPIC_NAME\" \\\n    --description-file \"$TEMP_FILE\" \\\n    --json 2>/dev/null || echo \"{}\")\n  \n  EPIC_KEY=$(echo \"$EPIC_RESULT\" | jq -r '.key // \"\"')\n  \n  if [ -n \"$EPIC_KEY\" ]; then\n    echo \"  ‚úÖ Created Epic: $EPIC_KEY\"\n    EPIC_KEYS[\"$EPIC_NAME\"]=\"$EPIC_KEY\"\n  else\n    echo \"  ‚ùå Failed to create Epic\"\n  fi\n  \n  rm -f \"$TEMP_FILE\"\ndone\n\n# Create Stories linked to Epics\necho \"\\nüìù Creating Stories linked to Epics...\"\n\nfor FILE in $FEATURE_FILES; do\n  FEATURE_NAME=$(grep -m1 \"^Feature:\" \"$FILE\" | sed 's/Feature: *//')\n  \n  if [ -z \"$FEATURE_NAME\" ]; then\n    continue\n  fi\n  \n  EPIC_NAME=\"${EPIC_MAP[$FILE]}\"\n  EPIC_KEY=\"${EPIC_KEYS[$EPIC_NAME]}\"\n  \n  echo \"\\nCreating Story: $FEATURE_NAME\"\n  echo \"  Under Epic: $EPIC_NAME ($EPIC_KEY)\"\n  \n  # Get rules for acceptance criteria\n  RULES=$(grep \"^  Rule:\" \"$FILE\" | sed 's/  Rule: /‚Ä¢ /' | tr '\\n' '\\r' || echo \"\")\n  \n  # Create Story description\n  STORY_DESC=\"h3. Story Overview\\n\"\n  STORY_DESC=\"${STORY_DESC}Implementation of *$FEATURE_NAME*.\\n\\n\"\n  STORY_DESC=\"${STORY_DESC}h3. Epic\\n\"\n  STORY_DESC=\"${STORY_DESC}Part of: $EPIC_NAME\\n\\n\"\n  STORY_DESC=\"${STORY_DESC}h3. Source\\n\"\n  STORY_DESC=\"${STORY_DESC}{noformat}$FILE{noformat}\\n\\n\"\n  \n  if [ -n \"$RULES\" ]; then\n    STORY_DESC=\"${STORY_DESC}h3. Business Rules\\n\"\n    STORY_DESC=\"${STORY_DESC}$RULES\\n\\n\"\n  fi\n  \n  STORY_DESC=\"${STORY_DESC}h3. Definition of Done\\n\"\n  STORY_DESC=\"${STORY_DESC}# All scenarios pass\\n\"\n  STORY_DESC=\"${STORY_DESC}# Code reviewed\\n\"\n  STORY_DESC=\"${STORY_DESC}# Tests passing\\n\"\n  STORY_DESC=\"${STORY_DESC}# Documentation updated\"\n  \n  TEMP_FILE=\"/tmp/story_desc_$$.txt\"\n  echo -e \"$STORY_DESC\" > \"$TEMP_FILE\"\n  \n  # Create Story WITH Epic Link\n  if [ -n \"$EPIC_KEY\" ]; then\n    # Try to set Epic Link during creation\n    STORY_RESULT=$(acli jira workitem create \\\n      --project \"$PROJECT_KEY\" \\\n      --type \"Story\" \\\n      --summary \"$FEATURE_NAME\" \\\n      --description-file \"$TEMP_FILE\" \\\n      --field \"Epic Link=$EPIC_KEY\" \\\n      --json 2>/dev/null || echo \"{}\")\n  else\n    # Create without Epic if no Epic key\n    STORY_RESULT=$(acli jira workitem create \\\n      --project \"$PROJECT_KEY\" \\\n      --type \"Story\" \\\n      --summary \"$FEATURE_NAME\" \\\n      --description-file \"$TEMP_FILE\" \\\n      --json 2>/dev/null || echo \"{}\")\n  fi\n  \n  STORY_KEY=$(echo \"$STORY_RESULT\" | jq -r '.key // \"\"')\n  \n  if [ -n \"$STORY_KEY\" ]; then\n    echo \"  ‚úÖ Created Story: $STORY_KEY\"\n    \n    # If Epic Link wasn't set during creation, try to update\n    if [ -n \"$EPIC_KEY\" ]; then\n      acli jira workitem edit \\\n        --key \"$STORY_KEY\" \\\n        --field \"Epic Link=$EPIC_KEY\" 2>/dev/null || \\\n        echo \"  ‚ö†Ô∏è  Could not link to Epic (may need manual linking)\"\n    fi\n  else\n    echo \"  ‚ùå Failed to create Story\"\n    rm -f \"$TEMP_FILE\"\n    continue\n  fi\n  \n  # Create Subtasks for scenarios\n  grep \"^  Scenario:\" \"$FILE\" | sed 's/  Scenario: *//' | while read -r SCENARIO; do\n    echo \"    Creating Subtask: $SCENARIO\"\n    \n    # Get Given/When/Then steps\n    STEPS=$(awk \"/Scenario: $SCENARIO/,/^  (Scenario:|Rule:|Feature:|$)/ { if (/^    (Given|When|Then|And|But)/) print }\" \"$FILE\" | tr '\\n' '\\r')\n    \n    # Create subtask description\n    SUBTASK_DESC=\"h3. Scenario\\n\"\n    SUBTASK_DESC=\"${SUBTASK_DESC}*$SCENARIO*\\n\\n\"\n    SUBTASK_DESC=\"${SUBTASK_DESC}h3. Steps\\n\"\n    SUBTASK_DESC=\"${SUBTASK_DESC}{code}\\n$STEPS\\n{code}\\n\\n\"\n    SUBTASK_DESC=\"${SUBTASK_DESC}h3. Acceptance Criteria\\n\"\n    SUBTASK_DESC=\"${SUBTASK_DESC}# Scenario passes\\n\"\n    SUBTASK_DESC=\"${SUBTASK_DESC}# Edge cases handled\\n\"\n    SUBTASK_DESC=\"${SUBTASK_DESC}# Unit tests written\"\n    \n    echo -e \"$SUBTASK_DESC\" > \"$TEMP_FILE\"\n    \n    SUBTASK_RESULT=$(acli jira workitem create \\\n      --type \"Subtask\" \\\n      --parent \"$STORY_KEY\" \\\n      --summary \"$SCENARIO\" \\\n      --description-file \"$TEMP_FILE\" \\\n      --json 2>/dev/null || echo \"{}\")\n    \n    SUBTASK_KEY=$(echo \"$SUBTASK_RESULT\" | jq -r '.key // \"\"')\n    \n    if [ -n \"$SUBTASK_KEY\" ]; then\n      echo \"      ‚úÖ Created Subtask: $SUBTASK_KEY\"\n    else\n      echo \"      ‚ùå Failed to create Subtask\"\n    fi\n  done\n  \n  rm -f \"$TEMP_FILE\"\ndone\n\necho \"\\n‚úÖ JIRA setup complete with hierarchy:\"\necho \"   Epic ‚Üí Story ‚Üí Subtask\"\necho \"\\nProject: $PROJECT_KEY\"\necho \"URL: https://pinyridgelabs.atlassian.net/browse/$PROJECT_KEY\"\n\n# Summary\nEPIC_COUNT=$(printf '%s\\n' \"${EPIC_KEYS[@]}\" | grep -c . || echo \"0\")\nSTORY_COUNT=$(acli jira workitem search --jql \"project = $PROJECT_KEY AND issuetype = Story\" --json | jq '. | length')\nSUBTASK_COUNT=$(acli jira workitem search --jql \"project = $PROJECT_KEY AND issuetype = Subtask\" --json | jq '. | length')\n\necho \"\\nüìä Created:\"\necho \"   ‚Ä¢ $EPIC_COUNT Epics\"\necho \"   ‚Ä¢ $STORY_COUNT Stories\"\necho \"   ‚Ä¢ $SUBTASK_COUNT Subtasks\"\n```",
  "examples": [
    {
      "trigger": "Setup JIRA project",
      "response": "üöÄ Setting up JIRA with Epic‚ÜíStory‚ÜíSubtask hierarchy\nProject: OPS\n\nüìä Analyzing features for Epic grouping...\n\nüéØ Creating Epics...\nCreating Epic: User Authentication & Security\n  ‚úÖ Created Epic: OPS-1\nCreating Epic: Billing & Insurance Management\n  ‚úÖ Created Epic: OPS-2\n\nüìù Creating Stories linked to Epics...\n\nCreating Story: User Login\n  Under Epic: User Authentication & Security (OPS-1)\n  ‚úÖ Created Story: OPS-3\n    Creating Subtask: Valid credentials\n      ‚úÖ Created Subtask: OPS-4\n\n‚úÖ JIRA setup complete with hierarchy:\n   Epic ‚Üí Story ‚Üí Subtask"
    }
  ],
  "success_criteria": {
    "creates_epics": true,
    "groups_features_intelligently": true,
    "links_stories_to_epics": true,
    "creates_complete_hierarchy": true,
    "uses_epic_link_field": true
  }
}